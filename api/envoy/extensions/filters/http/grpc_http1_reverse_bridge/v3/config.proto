syntax = "proto3";

package envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3;

import "envoy/config/route/v3/route_components.proto";

import "google/protobuf/wrappers.proto";

import "udpa/annotations/status.proto";
import "udpa/annotations/versioning.proto";
import "validate/validate.proto";

option java_package = "io.envoyproxy.envoy.extensions.filters.http.grpc_http1_reverse_bridge.v3";
option java_outer_classname = "ConfigProto";
option java_multiple_files = true;
option (udpa.annotations.file_status).package_version_status = ACTIVE;

// [#protodoc-title: gRPC HTTP/1.1 Reverse Bridge]
// gRPC HTTP/1.1 Reverse Bridge :ref:`configuration overview
// <config_http_filters_grpc_http1_reverse_bridge>`.
// [#extension: envoy.filters.http.grpc_http1_reverse_bridge]

// gRPC reverse bridge filter configuration
message FilterConfig {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfig";

  message ContentTypeHandling {
    // The content-type to convert the downstream request into during upstream proxying when the filter is applied. If unset,
    // no modification will be made to the content-type header.
    google.protobuf.StringValue upstream_content_type = 1;

    // If true, the content-type used on the downstream request will be set on the downstream response, regardless of what the upstream
    // response contained.
    bool preserve_downstream_content_type = 2;
  }

  // The content-type to pass to the upstream when the gRPC bridge filter is applied.
  // The filter will also validate that the upstream responds with the same content type.
  // Deprecated in favor of content_type_handling and upstream_response_validation.
  string content_type = 1 [deprecated = true];

  // Describes how to manage the upstream and downstream content-type headers. If this and
  // :ref:`content_type <envoy_v3_api_field_extensions.filters.http.grpc_http1_reverse_bridge.v3.FilterConfig.content_type>` is unset, no
  // modification will be made to either content-type headers.
  ContentTypeHandling content_type_handling = 3;

  // Validation to run against the upstream response headers. This can be used e.g. to validate that the upstream content-type matches the
  // expected value. If the upstream response fails any of the matchers, an error response is constructed.
  repeated config.route.v3.HeaderMatcher upstream_response_validation = 4;

  // If true, Envoy will assume that the upstream doesn't understand gRPC frames and
  // strip the gRPC frame from the request, and add it back in to the response. This will
  // hide the gRPC semantics from the upstream, allowing it to receive and respond with a
  // simple binary encoded protobuf.
  bool withhold_grpc_frames = 2;
}

// gRPC reverse bridge filter configuration per virtualhost/route/weighted-cluster level.
message FilterConfigPerRoute {
  option (udpa.annotations.versioning).previous_message_type =
      "envoy.config.filter.http.grpc_http1_reverse_bridge.v2alpha1.FilterConfigPerRoute";

  // If true, disables gRPC reverse bridge filter for this particular vhost or route.
  // If disabled is specified in multiple per-filter-configs, the most specific one will be used.
  bool disabled = 1;
}
